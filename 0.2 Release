#!/usr/bin/python
import re
import parted
import glob
import os
import ast
import sys
import psutil

abort_blocked = False;

# Check the kernel command line parameter 'nofsresize' was NOT specified
for line in open('/proc/cmdline'):
	if 'nofsresize' in line:
		abort_blocked = True

# Check that /.nofsresize is NOT present
if os.path.isfile('/.nofsresize'):
	abort_blocked = True

# Abort due to either of the above
if abort_blocked:
	sys.exit(1)

# Find the root device
for line in open("/proc/self/mountinfo"):
	if '/ / ' in line:
		r_major_minor = line.split(' ')[2]
		break
											
major=int(r_major_minor.split(":")[0])
minor=int(r_major_minor.split(":")[1])

# We now have the major/minor of the root device.
# Scan devices to find the corresponding block device.
# This is necessary because the device name
# reported in /proc/self/mountinfo may be /dev/root
# We will also check to see if it's a logical partition
# by checking the partition number. Partition numbers greater 
# than 4 are logical.
root_device = ''
for blockdev in glob.glob("/dev/sd??*")+glob.glob("/dev/mmcblk*p*"):
	rdev=os.stat(blockdev).st_rdev
	if os.major(rdev) == major and os.minor(rdev) == minor:
		root_device = blockdev
		endnum = root_device[-1]
		
		# If the end is a number, convert to an integer
		# then check the number which will determine if 
		# it's a logical partition or not 
		if endnum.isdigit():
			endnum = int(root_device[-1])
		if endnum <= 4:
			logical = False
		else:
			logical = True
	else:
		break
		
# If the root device is a partition, find the disk containing it
disk_device = ''
for pattern in [ '/dev/sd.', '/dev/mmcblk.' ]:
	match = re.match(pattern, root_device)
	if match:
		disk_device = root_device[:match.span()[1]]
		break

# Exit if no disk_device is found
if not disk_device:
	sys.exit(2)
	
# PHASE 1
# If /.rootfs-repartition exists, repartition the disk, then reboot
if os.path.isfile('/.rootfs-repartition'):
	
	# Create block device and disk label objects
	device = parted.Device(disk_device)
	disk = parted.Disk(device)
	
	# Do sanity checks
	constraint = device.optimalAlignedConstraint

	
	# Check if root partition is logical
	# If True, find and resize the extended partition	
	if logical:
		
		# Find the extended partition
		try:
			ext = disk.getExtendedPartition()

			# Try to grow the extended partition
        		# The try/except is another workaround for pyparted ticket #50.
			try:
				new_end_ext = ext.getMaxGeometry(constraint).end

			except TypeError:
				new_end_ext = ext.getMaxGeometry(constraint.getPedConstraint()).end

			# Check if the extended partition can grow			
			if ext.geometry.end < new_end_ext:
				disk.setPartitionGeometry(partition = ext, constraint = constraint, start = ext.geometry.start, end = new_end_ext)
				try:
					disk.commit()
				except:
					pass	
			else:
				print 'Unable to resize extended partition (Partition at max size or couldn\'t locate partition).'	
		except:
			pass
	
	# If logical partition is not found, skip 
	# and proceed to resizing the root partition
	else:
		pass

	
	# Blank previous device variables to avoid disk corruption
	del device, disk, constraint	

	# Rereate block device and disk label objects	
	device = parted.Device(disk_device)
	disk = parted.Disk(device)
	
	# Find root partition and do sanity checks
	constraint = device.optimalAlignedConstraint
	root = disk.getPartitionByPath(root_device)	

	try:
		new_end_root = root.getMaxGeometry(constraint).end
	except TypeError:
		new_end_root = root.getMaxGeometry(constraint.getPedConstraint).end

	
	# If root is an ext[234] filesystem and the partition end can grow,
        # change the partition ending and then reboot
	if (root.fileSystem.type == 'ext2'
            or root.fileSystem.type == 'ext3'
            or root.fileSystem.type == 'ext4' ) \
            and root.geometry.end < new_end_root:
		disk.setPartitionGeometry(partition = root, constraint = constraint, start = root.geometry.start, end = new_end_root)
		


		# disk.commit() will usually throw an exception because the kernel
		# is using the rootfs and refuses to accept the new partition table
		# ... so we reboot
		try:
			disk.commit()
		except:
			pass
	
	else:
		print 'Unable to resize root partition (max size, or unresizable fs type).'
	

	# Change flagfiles and reboot
	open('/.rootfs-resize','w').close()
	os.unlink('/.rootfs-repartition')
	os.system('/sbin/reboot')	


# PHASE 2
# if /.rootfs-resize exists, resize the filesystem
# Use ionice if available	
elif os.path.isfile('/.rootfs-resize'):
	
	# Use ionice if available
	if os.path.isfile('/usr/bin/ionice'):
		os.system('/usr/bin/ionice -c2 -n7 /sbin/resize2fs %s' % root_device)
	else:
		os.system('/sbin/resize2fs %s' % root_device)
		
	# Create swap is requested
	if os.path.isfile('/.swapsize'):
		swapsizefile = open('/.swapsize')
	    
		try:
			swapsize = ast_literal_eval(swapsizefile.readline())
		except:
			swapsize = 0

		swapsizefile.close()

		# Create /swap0 as a swapfile if it doesn't exist
		# and the requested size in MB is greater than 0
		if (not os.path.isfile('/swap0') ) and swapsize > 0:

			# Lower the I/O priority to minimum best-effort
			psutil.Process(os.getpid()).set_ionice(psutil.IOPRIO_CLASS_BE, 7)

			# Create swap file as swap0.part (so we recreate if aborted)
			MB = ' ' * (1024*1024)
			swapfile = open('/swap0.part', 'w')
			for X in range(swapsize):
				swapfile.write(MB)

				# Make it a swapfile
				os.system('/sbin/mkswap /swap0.part')

				# Rename the swapfile to /swap0
				os.rename('/swap0.part', '/swap0')

		# Add /swap0 to the fstab if not already present
		abort_fstab = False
		for line in open("/etc/fstab"):
        		if re.match("/swap0", line):
	    	   		abort_fstab = True
				break
	
		if not abort_fstab:
			fstab = open("/etc/fstab", "a")
			fstab.write("/swap0\t\tswap\tswap\n")
			fstab.close()

		# Active all swap spaces if possible
    		if os.path.isfile("/sbin/swapon"):
			os.system("/sbin/swapon -a")

		# Delete swap flagfile
		os.unlink("/.swapsize")
	
	# Delete resize flagfile
	os.unlink("/.rootfs-resize")
